openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/v1/external/customers/:
    get:
      operationId: list_customers
      description: Retrieve a paginated list of customers associated with the authenticated
        merchant.
      summary: List customers
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - Customers
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomerList'
          description: ''
    post:
      operationId: create_customer
      description: Create a new customer or update an existing one if the phone number
        already exists.
      summary: Create customer
      tags:
      - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      security:
      - MerchantAPIKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
  /api/v1/external/customers/{customer_pk}/locations/:
    get:
      operationId: list_customer_locations
      description: Retrieve all locations associated with the given customer.
      summary: List customer locations
      parameters:
      - in: path
        name: customer_pk
        schema:
          type: integer
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - Customer Locations
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExternalLocationList'
          description: ''
    post:
      operationId: create_customer_location
      description: Create a new location for the specified customer.
      summary: Create customer location
      parameters:
      - in: path
        name: customer_pk
        schema:
          type: integer
        required: true
      tags:
      - Customer Locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExternalLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExternalLocation'
        required: true
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLocation'
          description: ''
  /api/v1/external/customers/{customer_pk}/locations/{location_pk}/:
    patch:
      operationId: update_customer_location
      description: Partially update an existing location associated with the specified
        customer.
      summary: Update customer location
      parameters:
      - in: path
        name: customer_pk
        schema:
          type: integer
        required: true
      - in: path
        name: location_pk
        schema:
          type: integer
        required: true
      tags:
      - Customer Locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExternalLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExternalLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExternalLocation'
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLocation'
          description: ''
  /api/v1/external/customers/{id}/:
    get:
      operationId: retrieve_customer
      description: Retrieve the details of a specific customer by ID.
      summary: Retrieve customer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Customers
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
    patch:
      operationId: partial_update_customer
      description: Partially update the details of a customer by ID.
      summary: Partially update customer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomer'
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
  /api/v1/external/orders/:
    get:
      operationId: list_orders
      description: Retrieve a paginated list of orders.
      summary: List orders
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - Orders
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExternalOrderList'
              examples:
                SampleOrder:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - workflow: STANDARD
                      customer:
                        phone_number: '+96171234567'
                      customer_location:
                        address: Beirut, Hamra
                      merchant_location: 2
                      cod:
                      - - USD
                        - '10'
                      number_of_packages: 1
                  summary: Create new order with embedded customer and location
          description: ''
    post:
      operationId: create_order
      description: Create a new order.
      summary: Create order
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalOrder'
            examples:
              SampleOrder:
                value:
                  workflow: STANDARD
                  customer:
                    phone_number: '+96171234567'
                  customer_location:
                    address: Beirut, Hamra
                  merchant_location: 2
                  cod:
                  - - USD
                    - '10'
                  number_of_packages: 1
                summary: Create new order with embedded customer and location
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExternalOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExternalOrder'
        required: true
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrder'
              examples:
                SampleOrder:
                  value:
                    workflow: STANDARD
                    customer:
                      phone_number: '+96171234567'
                    customer_location:
                      address: Beirut, Hamra
                    merchant_location: 2
                    cod:
                    - - USD
                      - '10'
                    number_of_packages: 1
                  summary: Create new order with embedded customer and location
          description: ''
  /api/v1/external/orders/{order_id}/:
    get:
      operationId: retrieve_order
      description: Retrieve the details of a specific order by ID.
      summary: Retrieve order
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrder'
              examples:
                SampleOrder:
                  value:
                    workflow: STANDARD
                    customer:
                      phone_number: '+96171234567'
                    customer_location:
                      address: Beirut, Hamra
                    merchant_location: 2
                    cod:
                    - - USD
                      - '10'
                    number_of_packages: 1
                  summary: Create new order with embedded customer and location
          description: ''
    patch:
      operationId: partial_update_order
      description: Update the details of a order by ID.
      summary: Update order
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExternalOrder'
            examples:
              SampleOrder:
                value:
                  workflow: STANDARD
                  customer:
                    phone_number: '+96171234567'
                  customer_location:
                    address: Beirut, Hamra
                  merchant_location: 2
                  cod:
                  - - USD
                    - '10'
                  number_of_packages: 1
                summary: Create new order with embedded customer and location
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExternalOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExternalOrder'
      security:
      - MerchantAPIKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrder'
              examples:
                SampleOrder:
                  value:
                    workflow: STANDARD
                    customer:
                      phone_number: '+96171234567'
                    customer_location:
                      address: Beirut, Hamra
                    merchant_location: 2
                    cod:
                    - - USD
                      - '10'
                    number_of_packages: 1
                  summary: Create new order with embedded customer and location
          description: ''
  /api/v1/external/orders/{order_id}/cancel/:
    post:
      operationId: cancel_order
      description: Cancel an order identified by `order_id`. Will fail if the order
        cannot be cancelled.
      summary: Cancel order
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      security:
      - MerchantAPIKey: []
      responses:
        '204':
          description: Order successfully cancelled.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Permission Denied
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        phone_number:
          type: string
        secondary_phone_number:
          type: string
        email:
          type: string
          format: email
      required:
      - id
      - name
      - phone_number
    DeliveryStateEnum:
      enum:
      - CREATED
      - PICKUP_REQUESTED
      - PICKUP_ASSIGNED
      - SCANNED_FOR_PICKUP
      - PICKED_UP
      - AT_WAREHOUSE
      - DELIVERY_ASSIGNED
      - SCANNED_FOR_DELIVERY
      - PICKED_UP_FOR_DELIVERY
      - IN_TRANSIT
      - DELIVERED
      - AWAITING_RETURN
      - CANCELLED
      - DELIVERED_AT_WAREHOUSE
      type: string
      description: |-
        * `CREATED` - Created
        * `PICKUP_REQUESTED` - Pickup Requested
        * `PICKUP_ASSIGNED` - Pickup Assigned
        * `SCANNED_FOR_PICKUP` - Scanned for Pickup
        * `PICKED_UP` - Picked Up
        * `AT_WAREHOUSE` - At Warehouse
        * `DELIVERY_ASSIGNED` - Delivery Assigned
        * `SCANNED_FOR_DELIVERY` - Scanned For Delivery
        * `PICKED_UP_FOR_DELIVERY` - Picked Up For Delivery
        * `IN_TRANSIT` - In Transit
        * `DELIVERED` - Delivered
        * `AWAITING_RETURN` - Awaiting Return
        * `CANCELLED` - Cancelled
        * `DELIVERED_AT_WAREHOUSE` - Delivered At Warehouse
    DistrictEnum:
      enum:
      - Zahleh
      - Hasbaya
      - Baalbek
      - Jezzine
      - Baabda
      - Jbeil
      - Zgharta
      - Bint Jbeil
      - Hermel
      - Marjeyoun
      - Bsharri
      - Aley
      - Rashaya
      - Miniyeh-Danniyeh
      - Tripoli
      - Tyre
      - Nabatieh
      - Chouf
      - Maatn
      - Western Beqaa
      - Akkar
      - Sidon
      - Batroun
      - Keserwan
      - Koura
      - Beirut
      type: string
      description: |-
        * `Zahleh` - Zahleh
        * `Hasbaya` - Hasbaya
        * `Baalbek` - Baalbek
        * `Jezzine` - Jezzine
        * `Baabda` - Baabda
        * `Jbeil` - Jbeil
        * `Zgharta` - Zgharta
        * `Bint Jbeil` - Bint Jbeil
        * `Hermel` - Hermel
        * `Marjeyoun` - Marjeyoun
        * `Bsharri` - Bsharri
        * `Aley` - Aley
        * `Rashaya` - Rashaya
        * `Miniyeh-Danniyeh` - Miniyeh-Danniyeh
        * `Tripoli` - Tripoli
        * `Tyre` - Tyre
        * `Nabatieh` - Nabatieh
        * `Chouf` - Chouf
        * `Maatn` - Maatn
        * `Western Beqaa` - Western Beqaa
        * `Akkar` - Akkar
        * `Sidon` - Sidon
        * `Batroun` - Batroun
        * `Keserwan` - Keserwan
        * `Koura` - Koura
        * `Beirut` - Beirut
    Error:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    ExternalLocation:
      type: object
      properties:
        id:
          type: integer
        address:
          type: string
        district:
          $ref: '#/components/schemas/DistrictEnum'
        governorate:
          type: string
          readOnly: true
        city:
          type: string
        directions:
          type: string
      required:
      - address
      - city
      - district
      - governorate
    ExternalOrder:
      type: object
      properties:
        order_id:
          type: string
          readOnly: true
          nullable: true
        reference_id:
          type: string
          pattern: ^([A-Za-z0-9]|\.|-)*$
          maxLength: 40
        is_exchange:
          type: boolean
        workflow:
          $ref: '#/components/schemas/WorkflowEnum'
        tracking_link:
          type: string
          format: uri
          readOnly: true
        is_critical:
          type: boolean
          title: Critical
        customer:
          allOf:
          - $ref: '#/components/schemas/Customer'
          writeOnly: true
          description: |-
            Customer object identifying the customer for the order.
            - To identify an existing customer, provide the unique 'id' field. Other fields will update the existing record.
            - Alternatively, if 'id' is not provided, provide the unique 'phone_number' to identify the customer.
            - If neither 'id' nor existing 'phone_number' is found, a new customer will be created, and all required customer fields must be provided.
        customer_location:
          allOf:
          - $ref: '#/components/schemas/ExternalLocation'
          writeOnly: true
          description: |-
            Customer location object for order delivery or pickup.
            - To identify an existing location, provide the unique 'id'. Other fields will update that location.
            - If 'id' is not provided, a new location will be created and all required fields must be present.
            - The location must belong to the specified customer, else the request will be rejected.
        resolved_customer:
          allOf:
          - $ref: '#/components/schemas/Customer'
          readOnly: true
        resolved_customer_location:
          allOf:
          - $ref: '#/components/schemas/ExternalLocation'
          readOnly: true
        merchant_location:
          type: integer
          nullable: true
        cod:
          type: array
          items:
            type: array
            items:
              type: string
            maxItems: 2
            minItems: 2
          description: 'Total amount to be collected upon delivery. Example: [[''USD'',
            ''123.5'']]'
        number_of_packages:
          type: integer
          maximum: 99
          minimum: 1
        description:
          type: string
          maxLength: 300
        notes:
          type: string
        return_reason:
          type: string
          maxLength: 300
        delivery_state:
          allOf:
          - $ref: '#/components/schemas/DeliveryStateEnum'
          readOnly: true
        payment_state:
          type: string
          readOnly: true
        merchant_invoice:
          type: integer
          readOnly: true
          nullable: true
      required:
      - cod
      - customer
      - customer_location
      - delivery_state
      - merchant_invoice
      - order_id
      - payment_state
      - resolved_customer
      - resolved_customer_location
      - tracking_link
    PaginatedCustomerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
    PaginatedExternalLocationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExternalLocation'
    PaginatedExternalOrderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExternalOrder'
    PatchedCustomer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        phone_number:
          type: string
        secondary_phone_number:
          type: string
        email:
          type: string
          format: email
    PatchedExternalLocation:
      type: object
      properties:
        id:
          type: integer
        address:
          type: string
        district:
          $ref: '#/components/schemas/DistrictEnum'
        governorate:
          type: string
          readOnly: true
        city:
          type: string
        directions:
          type: string
    PatchedExternalOrder:
      type: object
      properties:
        order_id:
          type: string
          readOnly: true
          nullable: true
        reference_id:
          type: string
          pattern: ^([A-Za-z0-9]|\.|-)*$
          maxLength: 40
        is_exchange:
          type: boolean
        workflow:
          $ref: '#/components/schemas/WorkflowEnum'
        tracking_link:
          type: string
          format: uri
          readOnly: true
        is_critical:
          type: boolean
          title: Critical
        customer:
          allOf:
          - $ref: '#/components/schemas/Customer'
          writeOnly: true
          description: |-
            Customer object identifying the customer for the order.
            - To identify an existing customer, provide the unique 'id' field. Other fields will update the existing record.
            - Alternatively, if 'id' is not provided, provide the unique 'phone_number' to identify the customer.
            - If neither 'id' nor existing 'phone_number' is found, a new customer will be created, and all required customer fields must be provided.
        customer_location:
          allOf:
          - $ref: '#/components/schemas/ExternalLocation'
          writeOnly: true
          description: |-
            Customer location object for order delivery or pickup.
            - To identify an existing location, provide the unique 'id'. Other fields will update that location.
            - If 'id' is not provided, a new location will be created and all required fields must be present.
            - The location must belong to the specified customer, else the request will be rejected.
        resolved_customer:
          allOf:
          - $ref: '#/components/schemas/Customer'
          readOnly: true
        resolved_customer_location:
          allOf:
          - $ref: '#/components/schemas/ExternalLocation'
          readOnly: true
        merchant_location:
          type: integer
          nullable: true
        cod:
          type: array
          items:
            type: array
            items:
              type: string
            maxItems: 2
            minItems: 2
          description: 'Total amount to be collected upon delivery. Example: [[''USD'',
            ''123.5'']]'
        number_of_packages:
          type: integer
          maximum: 99
          minimum: 1
        description:
          type: string
          maxLength: 300
        notes:
          type: string
        return_reason:
          type: string
          maxLength: 300
        delivery_state:
          allOf:
          - $ref: '#/components/schemas/DeliveryStateEnum'
          readOnly: true
        payment_state:
          type: string
          readOnly: true
        merchant_invoice:
          type: integer
          readOnly: true
          nullable: true
    WorkflowEnum:
      enum:
      - STANDARD
      - RETURN
      type: string
      description: |-
        * `STANDARD` - Standard
        * `RETURN` - Return
  securitySchemes:
    MerchantAPIKey:
      type: apiKey
      in: header
      name: X-Api-Key
